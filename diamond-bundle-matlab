#!/usr/bin/env python
#
#  MATLABFind, a Diamond filter for interoperating with MATLAB
#
#  Copyright (c) 2011 Carnegie Mellon University
#  All rights reserved.
#
#  This software is distributed under the terms of the Eclipse Public
#  License, Version 1.0 which can be found in the file named LICENSE.
#  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
#  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#

import os
from opendiamond.bundle import bundle_macro
from optparse import OptionParser

def clean_macro_name(name):
    if name is None:
        return '1'
    else:
        return os.path.splitext(os.path.basename(name))[0]


if __name__ == '__main__':
    parser = OptionParser(
        usage='%prog [-h] [options] eval-macro [supporting-files...]',
        description='Package a Diamond filter written in MATLAB into an OpenDiamond search bundle.',
    )
    parser.add_option('-o', dest='outfile', metavar='outfile',
            help='path to output file')
    parser.add_option('-n', dest='name', metavar='display-name',
            default='MATLAB Search',
            help='display name for search')
    parser.add_option('-i', dest='init_file', metavar='init-macro',
            help='path to initialization macro')
    opts, args = parser.parse_args()
    if len(args) < 1:
        parser.error('no eval macro specified')
    eval_file = args[0]
    init = clean_macro_name(opts.init_file)
    eval = clean_macro_name(eval_file)
    outfile = opts.outfile
    if outfile is None:
        outfile = os.path.splitext(eval_file)[0] + '.search'
    files = list(args)
    if opts.init_file is not None:
        files.append(opts.init_file)

    try:
        bundle_macro(outfile, opts.name, 'fil_matlab_exec', [init, eval],
                                files)
    except Exception, e:
        parser.error(str(e))
